#!/usr/bin/env bpftrace
/*
 * syncsnoop	Trace sync() variety of syscalls.
 *		For Linux, uses bpftrace and eBPF.
 *
 * This is a snapshot from https://github.com/iovisor/bpftrace.
 * Refer to that repository for updated versions.
 *
 * Also a basic example of bpftrace.
 *
 * USAGE: syncsnoop.bt
 *
 * This is a bpftrace version of the bcc tool of the same name.
 *
 * Copyright 2018 Netflix, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License")
 *
 * 06-Sep-2018	Brendan Gregg	Created this.
 */

BEGIN
{
	printf("Tracing sync syscalls... Hit Ctrl-C to end.\n");
	printf("%-9s %-14s %-18s %-6s %-16s %s\n", "TIME", "DURATION(ms)", "TOTAL SO FAR(ms)", "PID", "COMM", "EVENT");
}

tracepoint:syscalls:sys_enter_sync,
tracepoint:syscalls:sys_enter_syncfs,
tracepoint:syscalls:sys_enter_fsync,
tracepoint:syscalls:sys_enter_fdatasync,
tracepoint:syscalls:sys_enter_sync_file_range,
tracepoint:syscalls:sys_enter_msync
{
	@start[tid] = (uint64) (nsecs / 1000);
}

tracepoint:syscalls:sys_exit_sync,
tracepoint:syscalls:sys_exit_syncfs,
tracepoint:syscalls:sys_exit_fsync,
tracepoint:syscalls:sys_exit_fdatasync,
tracepoint:syscalls:sys_exit_sync_file_range,
tracepoint:syscalls:sys_exit_msync
{
	$now = nsecs / 1000;
	$duration = (uint64) 0;
	if ($now > @start[tid] && @start[tid] != 0) {
		$duration = ($now - @start[tid]) / 1000;
	}
	delete(@start[tid]);
	@total_so_far = (uint64) (@total_so_far + $duration);

	time("%H:%M:%S  ");
	printf("%14d %18d %-6d %-16s %s\n", $duration, @total_so_far, pid, comm, probe);
}


END
{
	clear(@start);
}